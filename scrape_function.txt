
> def scrape_provider_performance(url=PROVIDER_PERFORMANCE_URL):
      """Fetches and parses the provider performance table."""
      print(f"--- Scraping provider performance data from: {url} ---")
      performance_data = []
      try:
          headers = {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
          }
          response = requests.get(url, headers=headers, timeout=20)
          response.raise_for_status()
          soup = BeautifulSoup(response.text, 'lxml')
          table = soup.find('table')
          if not table:
               main_content = soup.find('main')
               if main_content:
                   tables = main_content.find_all('table')
                   if tables: table = tables[0]
          if not table:
              print("--- Error: Could not find the performance table on the page. ---")
              return []
          tbody = table.find('tbody')
          if not tbody:
              print("--- Error: Found table but could not find tbody. ---")
              return []
          rows = tbody.find_all('tr')
          print(f"--- Found {len(rows)} rows in the table body. ---")
          # Expected column indices (adjust if the table layout changes)
          PROVIDER_COL = 0
          MODEL_COL = 1
          INTELLIGENCE_INDEX_COL = 3 # Assuming 4th column
          TOKENS_PER_S_COL = 5      # Assuming 6th column
          RESPONSE_TIME_COL = 7   # Assuming 8th column
          EXPECTED_COLS = max(PROVIDER_COL, MODEL_COL, INTELLIGENCE_INDEX_COL, TOKENS_PER_S_COL, RESPONSE_TIME_COL) + 1
  
          for row_index, row in enumerate(rows):
              cols = row.find_all('td')
              if len(cols) >= EXPECTED_COLS:
                  try:
                      provider_img = cols[PROVIDER_COL].find('img')
                      provider = provider_img['alt'].replace(' logo', '').strip() if provider_img and provider_img.has_attr('alt') else cols[PROVIDER_COL].get_text(strip=True)
                      model = cols[MODEL_COL].get_text(strip=True)
                      tokens_per_s_str = cols[TOKENS_PER_S_COL].get_text(strip=True)
                      response_time_str = cols[RESPONSE_TIME_COL].get_text(strip=True).lower().replace('s', '').strip()
                      intelligence_index_str = cols[INTELLIGENCE_INDEX_COL].get_text(strip=True)
  
                      # Convert tokens per second
                      try: tokens_per_s = float(tokens_per_s_str) if tokens_per_s_str.lower() != 'n/a' else 0.0
                      except ValueError: tokens_per_s = 0.0
                      # Convert response time
                      try: response_time_s = float(response_time_str) if response_time_str.lower() != 'n/a' else float('inf')
                      except ValueError: response_time_s = float('inf')

